"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[9601],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return t?a.createElement(h,s(s({ref:n},d),{},{components:t})):a.createElement(h,s({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48815:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:2},s="Lenses",i={unversionedId:"learn/immutable-data/lens",id:"learn/immutable-data/lens",title:"Lenses",description:"Lenses are the most common type of optic you work with. This section discusses",source:"@site/content/docs/learn/immutable-data/lens.md",sourceDirName:"learn/immutable-data",slug:"/learn/immutable-data/lens",permalink:"/learn/immutable-data/lens",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/immutable-data/lens.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"learnSidebar",previous:{title:"Introduction",permalink:"/learn/immutable-data/intro"},next:{title:"Optionals",permalink:"/learn/immutable-data/optional"}},l={},p=[{value:"The <code>Lens</code> type",id:"the-lens-type",level:2},{value:"Operations",id:"operations",level:3},{value:"Composition",id:"composition",level:3},{value:"More powerful <code>copy</code>",id:"more-powerful-copy",level:3}],d={toc:p},m="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lenses"},"Lenses"),(0,r.kt)("p",null,"Lenses are the most common type of optic you work with. This section discusses\nthem at length."),(0,r.kt)("admonition",{title:"In a rush?",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Lenses represent references to fields."),(0,r.kt)("li",{parentName:"ul"},"To access the value, use ",(0,r.kt)("inlineCode",{parentName:"li"},"get"),"."),(0,r.kt)("li",{parentName:"ul"},"To modify the value, use ",(0,r.kt)("inlineCode",{parentName:"li"},"set")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"modify"),"."),(0,r.kt)("li",{parentName:"ul"},"To modify several elements at once, use ",(0,r.kt)("inlineCode",{parentName:"li"},"copy"),"."))),(0,r.kt)("h2",{id:"the-lens-type"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"Lens")," type"),(0,r.kt)("p",null,"We've mentioned in the ",(0,r.kt)("a",{parentName:"p",href:"../intro"},"introduction")," that optics are ",(0,r.kt)("em",{parentName:"p"},"values")," that\nrepresent access to data. You can draw parallels with how function values\nrepresent behavior."),(0,r.kt)("p",null,"Let's introduce a few data classes and kindly ask the Arrow Optics plug-in to\ngenerate lenses for every field by having an ",(0,r.kt)("inlineCode",{parentName:"p"},"@optics")," annotation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import arrow.optics.*\n\n@optics data class Person(val name: String, val age: Int, val address: Address) {\n  companion object\n}\n@optics data class Address(val street: Street, val city: City) {\n  companion object\n}\n@optics data class Street(val name: String, val number: Int?) {\n  companion object\n}\n@optics data class City(val name: String, val country: String) {\n  companion object\n}\n")),(0,r.kt)("p",null,"The lenses are generated in the companion object, so you can think of your\n",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," being extended as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Person(val name: String, val age: Int, val address: Address) {\n  companion object {\n    val name: Lens<Person, String> = TODO()\n    val age: Lens<Person, Int> = TODO()\n    val address: Lens<Person, Address> = TODO()\n  }\n}\n")),(0,r.kt)("p",null,"Notice that lenses in Arrow are ",(0,r.kt)("em",{parentName:"p"},"typed"),', which means that they "know"\nboth the type of the larger value and the type of the element we focus on.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain"},"                  \u21b1 this lens operates on 'Person'\nval address: Lens<Person, Address>\n                          \u21b3 this lens gives access to an 'Address' value\n")),(0,r.kt)("h3",{id:"operations"},"Operations"),(0,r.kt)("p",null,"Lenses provide three primary operations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"get")," obtains the elements focused on a lens."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set")," changes the value of the focus to a new one."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modify")," transforms the value of the focus by applying a given function.")),(0,r.kt)("p",null,"Code speaks louder than words (well, sometimes). Here's a small snippet showcasing\nthe three operations applied to an instance of our ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," class. Notice how\nthe three operations live on the lens and get the value they operate on as an\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun example() {\n  val me = Person(\n    "Alejandro", 35, \n    Address(Street("Kotlinstraat", 1), City("Hilversum", "Netherlands"))\n  )\n\n  Person.name.get(me) shouldBe "Alejandro"\n  \n  val meAfterBirthdayParty = Person.age.modify(me) { it + 1 }\n  Person.age.get(meAfterBirthdayParty) shouldBe 36\n\n  val newAddress = Address(Street("Kotlinplein", null), City("Amsterdam", "Netherlands"))\n  val meAfterMoving = Person.address.set(me, newAddress)\n  Person.address.get(meAfterMoving) shouldBe newAddress\n}\n')),(0,r.kt)("h3",{id:"composition"},"Composition"),(0,r.kt)("p",null,"The power of lenses (and optics in general) lies in the ability to ",(0,r.kt)("em",{parentName:"p"},"compose"),"\nthem to get to nested values. The type parameters in ",(0,r.kt)("inlineCode",{parentName:"p"},"Lens")," ensure that the\ncomposition accesses values that are really there. For example, here's a lens\nthat focuses on the city where a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," lives:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val personCity: Lens<Person, String> =\n  Person.address compose Address.city compose City.name\n\nfun example() {\n  val me = Person(\n    "Alejandro", 35, \n    Address(Street("Kotlinstraat", 1), City("Hilversum", "Netherlands"))\n  )\n\n  personCity.get(me) shouldBe "Hilversum"\n  val meAtTheCapital = personCity.set(me, "Amsterdam")\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"compose")," infix function is an integral part of the library, but you almost\nnever see it mentioned explicitly. As part of its job, the Arrow Optics compiler\nplug-in introduces additional extension functions that allow you to use the\nregular dot operation to access composed lenses. The code above can be rewritten\nin that form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun example() {\n  val me = Person(\n    "Alejandro", 35, \n    Address(Street("Kotlinstraat", 1), City("Hilversum", "Netherlands"))\n  )\n\n  Person.address.city.name.get(me) shouldBe "Hilversum"\n  val meAtTheCapital = Person.address.city.name.set(me, "Amsterdam")\n}\n')),(0,r.kt)("h3",{id:"more-powerful-copy"},"More powerful ",(0,r.kt)("inlineCode",{parentName:"h3"},"copy")),(0,r.kt)("p",null,"Everything we've discussed to this point is enough to make the transformation\nof nested data much nicer without the nesting of nested ",(0,r.kt)("inlineCode",{parentName:"p"},"copy")," calls. However,\nif we need to modify more than one field, we must nest calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"modify"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Person.moveToAmsterdamModify(): Person =\n  Person.address.city.name.set(\n    Person.address.city.country.set(this, "Netherlands"),\n    "Amsterdam"\n  )\n')),(0,r.kt)("p",null,"Arrow Optics provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"copy")," function that replicates the\nbuilt-in ",(0,r.kt)("inlineCode",{parentName:"p"},"copy")," ability to modify more than one field. The syntax is slightly different,\nthough. After the ",(0,r.kt)("inlineCode",{parentName:"p"},"copy"),", you need to start a block. And within that block, you\ncan use the name of a lens to perform an operation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Person.moveToAmsterdamCopy(): Person = copy {\n  Person.address.city.name set "Amsterdam"\n  Person.address.city.country set "Netherlands"\n}\n')),(0,r.kt)("p",null,"Another nicety is that you can condense those operations that share\npart of the journey to their focus. In our case, we are modifying two elements\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"address.city"),", which we can join using ",(0,r.kt)("inlineCode",{parentName:"p"},"inside"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Person.moveToAmsterdamInside(): Person = copy {\n  inside(Person.address.city) {\n    City.name set "Amsterdam"\n    City.country set "Netherlands"\n  }\n}\n')))}c.isMDXComponent=!0}}]);