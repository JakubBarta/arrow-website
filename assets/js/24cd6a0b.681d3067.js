"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[7925],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),m=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},p=function(t){var e=m(t.components);return r.createElement(c.Provider,{value:e},t.children)},s="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,c=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),s=m(n),u=o,f=s["".concat(c,".").concat(u)]||s[u]||d[u]||i;return n?r.createElement(f,a(a({ref:e},p),{},{components:n})):r.createElement(f,a({ref:e},p))}));function f(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l[s]="string"==typeof t?t:o,a[1]=l;for(var m=2;m<i;m++)a[m]=n[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80260:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var r=n(87462),o=(n(67294),n(3905));const i={title:"Domain Model Validation In Kotlin: Part 3",image:"https://miro.medium.com/max/1400/1*6RXLldOxvMR3nKi_k_wYTA.png",category:"articles",tags:["core","articles"],link:"https://tibtof.medium.com/domain-model-validation-in-kotlin-part-3-96c3fd4af342"},a=void 0,l={permalink:"/community/blog/2022/03/10/domain-model-validation-in-kotlin-part-3",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2022-03-10-domain-model-validation-in-kotlin-part-3.md",source:"@site/content/blog/2022-03-10-domain-model-validation-in-kotlin-part-3.md",title:"Domain Model Validation In Kotlin: Part 3",description:"In the third part of the series, Tiberiu Tofan explores multiple techniques of using a context when doing validations",date:"2022-03-10T00:00:00.000Z",formattedDate:"March 10, 2022",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"articles",permalink:"/community/blog/tags/articles"}],readingTime:.2,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Domain Model Validation In Kotlin: Part 3",image:"https://miro.medium.com/max/1400/1*6RXLldOxvMR3nKi_k_wYTA.png",category:"articles",tags:["core","articles"],link:"https://tibtof.medium.com/domain-model-validation-in-kotlin-part-3-96c3fd4af342"},prevItem:{title:"Domain Model Validation In Kotlin: Part 4",permalink:"/community/blog/2022/03/31/domain-model-validation-in-kotlin-part-4"},nextItem:{title:"Domain Model Validation In Kotlin: Part 2",permalink:"/community/blog/2022/03/03/domain-model-validation-in-kotlin-part-2"}},c={authorsImageUrls:[]},m=[],p={toc:m},s="wrapper";function d(t){let{components:e,...n}=t;return(0,o.kt)(s,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the third part of the series, Tiberiu Tofan explores multiple techniques of using a context when doing validations\nand how the context can be changed in the tests to simulate success or failure. All using just Kotlin standard library."))}d.isMDXComponent=!0}}]);