"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[3232],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=c(n),d=o,u=f["".concat(p,".").concat(d)]||f[d]||m[d]||a;return n?r.createElement(u,i(i({ref:t},l),{},{components:n})):r.createElement(u,i({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[f]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},59653:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={title:"With Kafka",sidebar_position:3},i="SuspendApp with Kafka",s={unversionedId:"ecosystem/suspendapp/kafka",id:"ecosystem/suspendapp/kafka",title:"With Kafka",description:"When streaming records from Kafka we need to commit (acknowledge) the offset of the records",source:"@site/content/docs/ecosystem/suspendapp/kafka.md",sourceDirName:"ecosystem/suspendapp",slug:"/ecosystem/suspendapp/kafka",permalink:"/ecosystem/suspendapp/kafka",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/ecosystem/suspendapp/kafka.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"With Kafka",sidebar_position:3},sidebar:"ecosystemSidebar",previous:{title:"With Ktor",permalink:"/ecosystem/suspendapp/ktor"},next:{title:"Analysis",permalink:"/ecosystem/analysis/"}},p={},c=[],l={toc:c},f="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"suspendapp-with-kafka"},"SuspendApp with Kafka"),(0,o.kt)("p",null,"When streaming ",(0,o.kt)("em",{parentName:"p"},"records")," from Kafka we need to ",(0,o.kt)("em",{parentName:"p"},"commit")," (acknowledge) the offset of the ",(0,o.kt)("em",{parentName:"p"},"records"),"\nwe've processed.\nThe official recommendation for doing this is committing offsets in batches, so we typically don't send the commit event\nto Kafka for every processed record.\nInstead, we commit the offset every 5 seconds (or every x records, 5s is default)."),(0,o.kt)("p",null,"Imagine the application getting stopped after 4,5 seconds, either by ",(0,o.kt)("em",{parentName:"p"},"Ctrl+C")," or K8S or another type of\ncontainerization.\nWe could've processed thousands, or tens of thousands of events.\nIf we don't commit these offsets before shutting down we'd have to re-process all the events."),(0,o.kt)("p",null,"We can easily prevent this with SuspendApp, and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nomisRev/kotlin-kafka"},"kotlin-kafka"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/reactor/reactor-kafka"},"reactor-kafka"),".\nBoth these high-level Kafka libraries guarantee committing offsets upon termination of the stream, this includes\ncancellation!\nIn the example below, all calls to ",(0,o.kt)("inlineCode",{parentName:"p"},"acknowledge")," will be committed to Kafka before the SuspendApp terminates when\nreceiving ",(0,o.kt)("inlineCode",{parentName:"p"},"SIGTERM")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"SIGINT"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'import kotlinx.coroutines.flow.collect\nimport kotlinx.coroutines.flow.map\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport io.github.nomisRev.kafka.receiver.KafkaReceiver\nimport io.github.nomisRev.kafka.receiver.ReceiverSettings\nimport arrow.continuations.SuspendApp\n\nfun main() = SuspendApp {\n  val settings: ReceiverSettings<Nothing, String> = ReceiverSettings(\n    bootstrapServers = bootstrapServers,\n    groupId = "group-id",\n    valueDeserializer = StringDeserializer()\n  )\n  KafkaReceiver(settings)\n    .receive(topicName)\n    .map { record ->\n      println("${record.key()} -> ${record.value()}")\n      record.offset.acknowledge()\n    }.collect()\n}\n')))}m.isMDXComponent=!0}}]);