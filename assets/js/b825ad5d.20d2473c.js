"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[8637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87591:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"GitHub Actions / SARIF",sidebar_position:9,sidebar_custom_props:{icon:"icon-github.svg"}},o="<decorated-text icon={frontMatter.sidebar_custom_props.icon}>GitHub Actions / SARIF</decorated-text>",s={unversionedId:"ecosystem/analysis/sarif",id:"ecosystem/analysis/sarif",title:"GitHub Actions / SARIF",description:"This is still an alpha feature.",source:"@site/content/docs/ecosystem/analysis/sarif.md",sourceDirName:"ecosystem/analysis",slug:"/ecosystem/analysis/sarif",permalink:"/ecosystem/analysis/sarif",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/ecosystem/analysis/sarif.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"GitHub Actions / SARIF",sidebar_position:9,sidebar_custom_props:{icon:"icon-github.svg"}},sidebar:"ecosystemSidebar",previous:{title:"Java support",permalink:"/ecosystem/analysis/java"}},c={},l=[],p={toc:l},u="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"github-actions--sarif"},(0,r.kt)("decorated-text",{icon:i.sidebar_custom_props.icon},"GitHub Actions / SARIF")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This is still an alpha feature.")),(0,r.kt)("p",null,"Arrow Analysis generates a so-called SARIF report as part of its output. ",(0,r.kt)("a",{parentName:"p",href:"https://sarifweb.azurewebsites.net/"},"SARIF")," is a standard interchange format for static analysis, which can be later consumed by many different tools. When using the Gradle plug-in, the file can be found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"build/generated")," folder."),(0,r.kt)("p",null,"One very useful integration is with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/about-integration-with-code-scanning"},"GitHub's Code Scanning"),". In that case the results of the analysis appear as part of the workflow output, annotating the source code itself. You can see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/arrow-kt/backend-arrow-example/pull/6/checks?check_run_id=4497725364"},"an example"),' for an "unsatisfiable pre-condition" error.'),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Unfortunately, you need to pay for Code Scanning in private repos. For public ones you can enable it in the ",(0,r.kt)("em",{parentName:"p"},"Security & analysis")," tab in the repo settings.")),(0,r.kt)("p",null,"The following snippet shows how to configure your GitHub Action workflow to make it aware of Code Scanning. We assume that you've ",(0,r.kt)("a",{parentName:"p",href:"../quickstart"},"configured your Gradle project to run Arrow Analysis")," as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"build"),' task. The next step is to take all the SARIF files and put them in a single folder, what we call "bundle analysis report" here. Finally you use the ',(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github"},(0,r.kt)("inlineCode",{parentName:"a"},"upload-sarif")," action"),", passing the name of the folder where you've gathered the SARIF files. We use ",(0,r.kt)("inlineCode",{parentName:"p"},"if: always()")," because otherwise the results would only be uploaded on a succesful run, which is the least interesting scenario for an analysis tool."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  \n  build_artifacts:\n    \n    steps:\n      - first_steps\n      \n      - name: Build and test with Gradle\n        run: ./gradlew build\n\n      - more_steps\n\n      - name: Bundle analysis report\n        if: always()\n        run: mkdir sarif && find . -name '*.sarif' | xargs -I{} cp \"{}\" ./sarif/\n\n      - name: Upload analysis report\n        if: always()\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: sarif # path relative to root\n")))}f.isMDXComponent=!0}}]);