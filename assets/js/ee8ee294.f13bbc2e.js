"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[6318],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,b=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(b,a(a({ref:t},p),{},{components:n})):o.createElement(b,a({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const i={title:"Roll your own Computation blocks in Kotlin",image:"https://img.youtube.com/vi/0_zatebXMDU/hqdefault.jpg",category:"videos",tags:["core","fx","videos"],link:"https://youtu.be/0_zatebXMDU",event:"Lambda Lille"},a=void 0,l={permalink:"/community/blog/2020/12/16/roll-your-own-computation-blocks-kotlin",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-12-16-roll-your-own-computation-blocks-kotlin.md",source:"@site/content/blog/2020-12-16-roll-your-own-computation-blocks-kotlin.md",title:"Roll your own Computation blocks in Kotlin",description:"Computation blocks empower library authors and users to build ad-hoc operators and DSLs over any data-type getting rid of API complexity and simplifying composition. In this talk, we will learn how we can build Computation blocks over Kotlin suspend functions & the Arrow Continuations library's reset / shift capabilities. We will demonstrate the composition of well known JVM data-types and patterns such as lists, futures, streams, and IOs, where callback chains can be simply replaced by a single",date:"2020-12-16T00:00:00.000Z",formattedDate:"December 16, 2020",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"fx",permalink:"/community/blog/tags/fx"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.71,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Roll your own Computation blocks in Kotlin",image:"https://img.youtube.com/vi/0_zatebXMDU/hqdefault.jpg",category:"videos",tags:["core","fx","videos"],link:"https://youtu.be/0_zatebXMDU",event:"Lambda Lille"},prevItem:{title:"Advanced FP for the Enterprise Bee: Traverse",permalink:"/community/blog/2021/01/08/advanced-fp-enterprise-bee-traverse"},nextItem:{title:"Fight Complexity with Functional Programming",permalink:"/community/blog/2020/11/19/fight-complexity-with-functional-programming"}},s={authorsImageUrls:[]},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Computation blocks empower library authors and users to build ad-hoc operators and DSLs over any data-type getting rid of API complexity and simplifying composition. In this talk, we will learn how we can build Computation blocks over Kotlin suspend functions & the Arrow Continuations library's ",(0,r.kt)("inlineCode",{parentName:"p"},"reset")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"shift")," capabilities. We will demonstrate the composition of well known JVM data-types and patterns such as lists, futures, streams, and IOs, where callback chains can be simply replaced by a single\nsuspended operator. The Kotlin suspension system provides enough capabilities to implement delimited continuations allowing us to ignore methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"flatMap"),' on your favorite data-type in favor of direct imperative syntax. Leveraging Kotlin suspension & thinking of Continuations as "The Mother of all Monads", we will embark on this journey where we\'ll build and roll our own computation blocks with Arrow Continuations.'))}m.isMDXComponent=!0}}]);