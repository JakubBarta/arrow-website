"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[9362],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[d]="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={sidebar_position:3},l="Optionals",r={unversionedId:"learn/immutable-data/optional",id:"learn/immutable-data/optional",title:"Optionals",description:"Optionals allow focusing on elements that may not be present. This includes",source:"@site/content/docs/learn/immutable-data/optional.md",sourceDirName:"learn/immutable-data",slug:"/learn/immutable-data/optional",permalink:"/learn/immutable-data/optional",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/immutable-data/optional.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"learnSidebar",previous:{title:"Lenses",permalink:"/learn/immutable-data/lens"},next:{title:"Traversals",permalink:"/learn/immutable-data/traversal"}},s={},p=[{value:"Indexed collections",id:"indexed-collections",level:2},{value:"Nullable types",id:"nullable-types",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"optionals"},"Optionals"),(0,i.kt)("p",null,"Optionals allow focusing on elements that may not be present. This includes\nnullable values and elements on indexed collections such as ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Map"),"."),(0,i.kt)("admonition",{title:"In a rush?",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Optionals represent potentially missing values."),(0,i.kt)("li",{parentName:"ul"},"Prisms extend optionals to represent class hierarchies."),(0,i.kt)("li",{parentName:"ul"},"To access the value, use ",(0,i.kt)("inlineCode",{parentName:"li"},"getOrNull"),"."),(0,i.kt)("li",{parentName:"ul"},"To modify the value (",(0,i.kt)("strong",{parentName:"li"},"only")," if present), use ",(0,i.kt)("inlineCode",{parentName:"li"},"set")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"modify"),"."))),(0,i.kt)("h2",{id:"indexed-collections"},"Indexed collections"),(0,i.kt)("p",null,"To exemplify why optionals are helpful, let's introduce a few domain classes\nthat model a small in-memory database mapping person names to the city in\nwhich they live."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"import arrow.optics.*\nimport arrow.optics.dsl.*\nimport arrow.optics.typeclasses.*\n\n@optics data class Db(val cities: Map<String, City>) {\n  companion object\n}\n@optics data class City(val name: String, val country: String) {\n  companion object\n}\n")),(0,i.kt)("p",null,"There's a notion of elements within a map, which we refer to by their key.\nHowever, we cannot model them as lenses because we don't know whether\na particular key is present in the map. Optionals come to the rescue: they are\noptics whose focus may not exist for a specific value."),(0,i.kt)("p",null,"As a result, the ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," operation is replaced by ",(0,i.kt)("inlineCode",{parentName:"p"},"getOrNull"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"\nindicates that the value is not present. The following code snippet provides\nan example of that behavior using the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," provided by Arrow Optics."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val db = Db(mapOf(\n  "Alejandro" to City("Hilversum", "Netherlands"),\n  "Ambrosio"  to City("Ciudad Real", "Spain")\n))\n\nfun example() {\n  Db.cities.index(Index.map(), "Alejandro").country.getOrNull(db) shouldBe "Netherlands"\n  Db.cities.index(Index.map(), "Jack").country.getOrNull(db) shouldBe null\n}\n')),(0,i.kt)("p",null,"One important (and sometimes surprising) behavior of optionals is that using\n",(0,i.kt)("inlineCode",{parentName:"p"},"set")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"modify")," only transforms the value if it is already present. That means\nthat we cannot use ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," to ",(0,i.kt)("em",{parentName:"p"},"add")," elements to the database, only to ",(0,i.kt)("em",{parentName:"p"},"modify"),"\nthose already present."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun example() {\n  val dbWithJack = Db.cities.index(Index.map(), "Jack").set(db, City("London", "UK"))\n  // Jack was not really added to the database\n  ("Jack" in dbWithJack.cities) shouldBe false\n}\n')),(0,i.kt)("p",null,"If you want to perform a change over the collection, use ",(0,i.kt)("inlineCode",{parentName:"p"},"modify")," over the\nlens that corresponds to that field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun example() {\n  val dbWithJack = Db.cities.modify(db) { it + ("Jack" to City("London", "UK")) }\n  // now Jack is finally in the database\n  ("Jack" in dbWithJack.cities) shouldBe true\n}\n')),(0,i.kt)("admonition",{title:"More indexed collections",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The first parameter to the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," optional represents the type of collection\nyou are accessing. Currently, this argument can be ",(0,i.kt)("inlineCode",{parentName:"p"},"Index.list"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Index.map"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"Index.sequence"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"Index.string"),". The choice defines the type of keys\nand values expected by each operation.")),(0,i.kt)("h2",{id:"nullable-types"},"Nullable types"),(0,i.kt)("admonition",{title:"Breaking change in Arrow 2.x",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"The Arrow Optics plug-in in Arrow 1.x creates optionals for fields with nullable\ntypes. This has sometimes led to surprises because, with an optional, you cannot\nmodify that value if it's ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". In Arrow 2.x, every field gives rise to a lens\ninstead. The old behavior is available via the ",(0,i.kt)("inlineCode",{parentName:"p"},"notNull")," extension function.")),(0,i.kt)("p",null,"Kotlin supports the notion of ",(0,i.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/null-safety.html"},"nullable types"),",\nwhich clearly specify when a value may be absent. The compiler prevents you from\ncalling a method or function that requires a non-",(0,i.kt)("inlineCode",{parentName:"p"},"null")," value with a potentially\nabsent one. These checks are also in place when working with Arrow Optics;\nif you have a ",(0,i.kt)("inlineCode",{parentName:"p"},"nickname: Lens<Person, String?>"),", you must account for\nnullability in each potential modification."),(0,i.kt)("p",null,"It's also possible to turn a lens over a nullable type into an optional of the\nunwrapped type using ",(0,i.kt)("inlineCode",{parentName:"p"},"notNull"),". In the example above, ",(0,i.kt)("inlineCode",{parentName:"p"},"nickname.notNull"),"\nhas the type ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional<Person, String>")," (notice the lack of ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," at the end\nof the second type parameter). However, you should be aware that, in the same way\nas with indexed collections where you could not add or remove elements, with\n",(0,i.kt)("inlineCode",{parentName:"p"},"notNull"),", you cannot change whether the value is ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," or not; only modify\nit if it's already not null."))}m.isMDXComponent=!0}}]);