"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[5265],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>w});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),f=o,w=m["".concat(s,".").concat(f)]||m[f]||u[f]||a;return r?n.createElement(w,i(i({ref:t},p),{},{components:r})):n.createElement(w,i({ref:t},p))}));function w(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},36225:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={title:"FP with Kotlin/Arrow: Monad Comprehensions & Parallel Processing",image:"https://img.youtube.com/vi/nAtzuIRryuE/maxresdefault.jpg",category:"videos",tags:["fx","videos"],link:"https://youtu.be/nAtzuIRryuE"},i=void 0,l={permalink:"/community/blog/2020/02/26/fp-with-kotlin-arrow",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2020-02-26-fp-with-kotlin-arrow.md",source:"@site/content/blog/2020-02-26-fp-with-kotlin-arrow.md",title:"FP with Kotlin/Arrow: Monad Comprehensions & Parallel Processing",description:"Arrow has multiple libraries available for functional programming. In this talk we'll focus on Arrow FX and learn how to handle IO in a functional way with an introduction to monadic composition. Then we'll examine how to compose monads in a cleaner fashion with Arrow FX's monad comprehensions. Finally, we'll take a look at how to parallelize IO monads with parallel map strategies.",date:"2020-02-26T00:00:00.000Z",formattedDate:"February 26, 2020",tags:[{label:"fx",permalink:"/community/blog/tags/fx"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.315,hasTruncateMarker:!1,authors:[],frontMatter:{title:"FP with Kotlin/Arrow: Monad Comprehensions & Parallel Processing",image:"https://img.youtube.com/vi/nAtzuIRryuE/maxresdefault.jpg",category:"videos",tags:["fx","videos"],link:"https://youtu.be/nAtzuIRryuE"},prevItem:{title:"IO integration with kotlinx.coroutines",permalink:"/community/blog/2020/03/02/io-integration-kotlinx-coroutines"},nextItem:{title:"What could possibly go wrong? - A safer programming with Arrow",permalink:"/community/blog/2020/02/26/safer-programming-with-arrow"}},s={authorsImageUrls:[]},c=[],p={toc:c},m="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Arrow has multiple libraries available for functional programming. In this talk we'll focus on Arrow FX and learn how to handle IO in a functional way with an introduction to monadic composition. Then we'll examine how to compose monads in a cleaner fashion with Arrow FX's monad comprehensions. Finally, we'll take a look at how to parallelize IO monads with parallel map strategies."))}u.isMDXComponent=!0}}]);