"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[4054],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),y=r,d=c["".concat(l,".").concat(y)]||c[y]||m[y]||i;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},64140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:4},o="Mutability and loops",s={unversionedId:"ecosystem/analysis/mutability",id:"ecosystem/analysis/mutability",title:"Mutability and loops",description:"Arrow Analysis supports mutability at the level of functions (but not yet at the level of classes). However, when you declare something with var, things get tricky. \ud83d\udc7b",source:"@site/content/docs/ecosystem/analysis/mutability.md",sourceDirName:"ecosystem/analysis",slug:"/ecosystem/analysis/mutability",permalink:"/ecosystem/analysis/mutability",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/ecosystem/analysis/mutability.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"ecosystemSidebar",previous:{title:"Control operators",permalink:"/ecosystem/analysis/control"},next:{title:"Types and invariants",permalink:"/ecosystem/analysis/types"}},l={},p=[{value:"Loops",id:"loops",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mutability-and-loops"},"Mutability and loops"),(0,r.kt)("p",null,"Arrow Analysis supports mutability at the level of functions (but not yet at the level of classes). However, when you declare something with ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),", things get tricky. \ud83d\udc7b"),(0,r.kt)("p",null,"When a local variable ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," is immutable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val x = COMPLICATED_THING\n")),(0,r.kt)("p",null,"the check knows upfront that any usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," correspond to the same ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLICATED_THING"),", wherever it's used later on. However, if the declaration uses ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),", at the point in which we use ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," the value inside of it may be completely different from the first one!"),(0,r.kt)("p",null,"The way out of this problem is to promise Arrow Analysis that some condition over a mutable variable will ",(0,r.kt)("em",{parentName:"p"},"always")," be true for the entire computation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the check can base its reasoning on this promise,"),(0,r.kt)("li",{parentName:"ul"},"but we need to check that you obey your promise every time you try to give a new value.")),(0,r.kt)("p",null,"We call this promise an ",(0,r.kt)("strong",{parentName:"p"},"invariant")," of the mutable variable."),(0,r.kt)("p",null,'As a consequence, if you do not declare an invariant, Arrow Analysis knows nothing about your variable. Here\'s an example which is "obviously" correct, but not accepted by the tool:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import arrow.analysis.post\n\nfun usesMutability(x: Int): Int {\n  var z = 2\n  return z.post({ it > 0 }) { "greater than 0" }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain"},"e: declaration `usesMutability` fails to satisfy the post-condition: ($result > 0)\n")),(0,r.kt)("p",null,"Let's declare an invariant. We use the same syntax as post-conditions, but use the special function ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant")," instead. Note that even though syntactically the invariant reads as part of the initial value, it really talks about the mutable variable being declared (",(0,r.kt)("inlineCode",{parentName:"p"},"z")," in this case)\n. After attaching this information to the variable, we are free to re-assign the variable, but we need to keep our promise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import arrow.analysis.invariant\nimport arrow.analysis.post\n\nfun usesMutability(x: Int): Int {\n  var z = 2.invariant({ it > 0 }) { "invariant it > 0" }\n  z = 3\n  return z.post({ it > 0 }) { "greater than 0" }\n}\n')),(0,r.kt)("p",null,"Of course, if we don't keep our promise, Arrow Analysis won't be happy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import arrow.analysis.invariant\nimport arrow.analysis.post\n\nfun usesMutability(x: Int): Int {\n  var z = 2.invariant({ it > 0 }) { "invariant it > 0" }\n  z = 0 // 0 is not > 0\n  return z.post({ it > 0 }) { "greater than 0" }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain"},"e: invariants are not satisfied in `z = 0`\n")),(0,r.kt)("h2",{id:"loops"},"Loops"),(0,r.kt)("p",null,"One place in which mutability is hard to avoid is loops. Our recommendation is to think carefully about invariants for your mutable variables, because a good choice will determine what can be checked. Here's an example in which we compute the length of a list using a mutable integral variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import arrow.analysis.invariant\nimport arrow.analysis.post\n\nfun <A> List<A>.count(): Int {\n  var count = 0.invariant({ it >= 0 }) { "z >= 0" }\n  for (elt in this) { count = count + 1 }\n  return count.post({ it >= 0 }) { "result >= 0" }\n}\n')),(0,r.kt)("p",null,"We are investigating ways to introduce additional information in the tool, like ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," looping exactly many times as the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," of the list."))}m.isMDXComponent=!0}}]);