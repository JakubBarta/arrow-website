"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[1712],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(r),d=o,g=p["".concat(s,".").concat(d)]||p[d]||u[d]||a;return r?n.createElement(g,i(i({ref:t},m),{},{components:r})):n.createElement(g,i({ref:t},m))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},88142:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={title:"It's all about morphisms",image:"https://img.youtube.com/vi/Eq8dv4H3RTE/maxresdefault.jpg",category:"videos",tags:["core","videos"],link:"https://www.youtube.com/watch?v=Eq8dv4H3RTE",event:"Voxxed Days, Vienna"},i=void 0,l={permalink:"/community/blog/2018/03/21/morphisms",editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/blog/2018-03-21-morphisms.md",source:"@site/content/blog/2018-03-21-morphisms.md",title:"It's all about morphisms",description:"@uberto gives a gentle introduction to Category Theory for programmers used to OOP but interested in Functional Programming. No Haskell knowledge required. We will explain main concepts behind functional programming with many diagrams and simple metaphors and examples. Some code will clarify how to translate these ideas in programs.",date:"2018-03-21T00:00:00.000Z",formattedDate:"March 21, 2018",tags:[{label:"core",permalink:"/community/blog/tags/core"},{label:"videos",permalink:"/community/blog/tags/videos"}],readingTime:.245,hasTruncateMarker:!1,authors:[],frontMatter:{title:"It's all about morphisms",image:"https://img.youtube.com/vi/Eq8dv4H3RTE/maxresdefault.jpg",category:"videos",tags:["core","videos"],link:"https://www.youtube.com/watch?v=Eq8dv4H3RTE",event:"Voxxed Days, Vienna"},prevItem:{title:"Introduction to Kotlin Arrow by Jacob Bass",permalink:"/community/blog/2018/03/26/kotlin-arrow"},nextItem:{title:"Optics and Type Classes in Arrow",permalink:"/community/blog/2018/01/17/optics-type-classes-arrow"}},s={authorsImageUrls:[]},c=[],m={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/uberto"},"@uberto")," gives a gentle introduction to Category Theory for programmers used to OOP but interested in Functional Programming. No Haskell knowledge required. We will explain main concepts behind functional programming with many diagrams and simple metaphors and examples. Some code will clarify how to translate these ideas in programs."))}u.isMDXComponent=!0}}]);