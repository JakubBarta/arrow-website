"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[1868],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},48632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const i={description:"Writing your own DSLs with Raise.",sidebar_position:5},o="Creating your own error wrappers",l={unversionedId:"learn/typed-errors/own-error-types",id:"learn/typed-errors/own-error-types",title:"Creating your own error wrappers",description:"Writing your own DSLs with Raise.",source:"@site/content/docs/learn/typed-errors/own-error-types.md",sourceDirName:"learn/typed-errors",slug:"/learn/typed-errors/own-error-types",permalink:"/learn/typed-errors/own-error-types",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/typed-errors/own-error-types.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{description:"Writing your own DSLs with Raise.",sidebar_position:5},sidebar:"learnSidebar",previous:{title:"Validation",permalink:"/learn/typed-errors/validation"},next:{title:"Coroutines",permalink:"/learn/coroutines/"}},s={},p=[{value:"Basic functionality",id:"basic-functionality",level:2},{value:"Reflections on <code>Failure</code>",id:"reflections-on-failure",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-your-own-error-wrappers"},"Creating your own error wrappers"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Raise")," is a powerful tool that allows us to create our own DSLs to raise typed errors.\nIt easily allows integration with existing libraries and frameworks that offer similar data types like ",(0,r.kt)("inlineCode",{parentName:"p"},"Either")," or even your own custom types.\nFor example, let's take a popular ADT often used in the front end, a type that models ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Content"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"Failure"),", often abbreviated as ",(0,r.kt)("inlineCode",{parentName:"p"},"LCE"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"sealed interface Lce<out E, out A> {\n  object Loading : Lce<Nothing, Nothing>\n  data class Content<A>(val value: A) : Lce<Nothing, A>\n  data class Failure<E>(val error: E) : Lce<E, Nothing>\n}\n")),(0,r.kt)("h2",{id:"basic-functionality"},"Basic functionality"),(0,r.kt)("p",null,"Let's say that once a ",(0,r.kt)("inlineCode",{parentName:"p"},"Failure")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")," case is encountered, we want to short-circuit and not continue with the computation.\nIt's easy to define a ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise")," instance for ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce")," that does just that. We'll use the composition pattern to do this ",(0,r.kt)("strong",{parentName:"p"},"without")," context receivers.\nSince we need to ",(0,r.kt)("em",{parentName:"p"},"raise")," both ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce.Loading")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce.Failure"),", our ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise")," instance will need to be able to ",(0,r.kt)("inlineCode",{parentName:"p"},"raise")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce<E, Nothing>"),", and we wrap that in a ",(0,r.kt)("inlineCode",{parentName:"p"},"LceRaise")," class.\nWithin that class, a ",(0,r.kt)("inlineCode",{parentName:"p"},"bind")," function can be defined to short-circuit any encountered ",(0,r.kt)("inlineCode",{parentName:"p"},"Failure")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")," case or otherwise return the ",(0,r.kt)("inlineCode",{parentName:"p"},"Content")," value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@JvmInline\nvalue class LceRaise<E>(val raise: Raise<Lce<E, Nothing>>) : Raise<Lce<E, Nothing>> by raise {\n  fun <A> Lce<E, A>.bind(): A =  when (this) {\n    is Lce.Content -> value\n    is Lce.Failure -> raise.raise(this)\n    Lce.Loading -> raise.raise(Lce.Loading)\n  }\n}\n")),(0,r.kt)("p",null,"All that is required now is a DSL function. We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"recover")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"fold")," function to summon an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"RaiseLce<E, Nothing>")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise")," type class.\nWe wrap the ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," in an ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce.Content")," value and return any encountered ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce<E, Nothing>")," value. We can call ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," by wrapping ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise<Lce<E, Nothing>>")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"LceRaise"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@OptIn(ExperimentalTypeInference::class)\ninline fun <E, A> lce(@BuilderInference block: LceRaise<E>.() -> A): Lce<E, A> =\n  recover({ Lce.Content(block(LceRaise(this))) }) { e: Lce<E, Nothing> -> e }\n")),(0,r.kt)("p",null,"We can now use this DSL to compose our computations and ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce")," values in the same way as we've discussed above in this document.\nFurthermore, since this DSL is built on top of ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise"),", we can use all the functions we've discussed above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun example() {\n  lce {\n    val a = Lce.Content(1).bind()\n    val b = Lce.Content(1).bind()\n    a + b\n  } shouldBe Lce.Content(2)\n\n  lce {\n    val a = Lce.Content(1).bind()\n    ensure(a > 1) { Lce.Failure("a is not greater than 1") }\n    a + 1\n  } shouldBe Lce.Failure("a is not greater than 1")\n}\n')),(0,r.kt)("p",null,"If we'd used ",(0,r.kt)("em",{parentName:"p"},"context receivers"),", defining this DSL would be even more straightforward, and we could use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise")," type class directly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"context(Raise<Lce<E, Nothing>>)\nfun <E, A> Lce<E, A>.bind(): A =  when (this) {\n  is Lce.Content -> value\n  is Lce.Failure -> raise(this)\n  Lce.Loading -> raise(Lce.Loading)\n}\n\ninline fun <E, A> lce(@BuilderInference block: Raise<Lce<E, Nothing>>.() -> A): Lce<E, A> =\n  recover({ Lce.Content(block(this)) }) { e: Lce<E, Nothing> -> e }\n")),(0,r.kt)("h2",{id:"reflections-on-failure"},"Reflections on ",(0,r.kt)("inlineCode",{parentName:"h2"},"Failure")),(0,r.kt)("p",null,"The reason to choose ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce<E, Nothing>")," as type for ",(0,r.kt)("inlineCode",{parentName:"p"},"Failure")," allows for a DSL that has multiple errors.\nLet's consider now a type similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"Lce"),", but with additional states which are not considered success."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"DialogResult<out T>\n \u251c Positive<out T>(value: T) : DialogResult<T>\n \u251c Neutral : DialogResult<Nothing>\n \u251c Negative : DialogResult<Nothing>\n \u2514 Cancelled: DialogResult<Nothing>\n")),(0,r.kt)("p",null,"We can now not really conveniently provide ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise")," over the ",(0,r.kt)("em",{parentName:"p"},"flat")," type ",(0,r.kt)("inlineCode",{parentName:"p"},"DialogResult"),", and are kind-of forced to use ",(0,r.kt)("inlineCode",{parentName:"p"},"DialogResult<Nothing>"),". However, if we stratify our type differently,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"DialogResult<out T>\n \u251c Positive<out T>(value: T) : DialogResult<T>\n \u2514 Error : DialogResult<Nothing>\n    \u251c Neutral : Error\n    \u251c Negative : Error\n    \u2514 Cancelled: Error\n")),(0,r.kt)("p",null,"We can again benefit from ",(0,r.kt)("inlineCode",{parentName:"p"},"Raise<DialogResult.Error>"),", and the reason that this is ",(0,r.kt)("strong",{parentName:"p"},"much")," more desirable, it that you can now also interop with ",(0,r.kt)("inlineCode",{parentName:"p"},"Either"),"!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"dialogResult {\n  val x: DialogResult.Positive(1).bind()\n  val y: Int = DialogResult.Error.left().bind()\n  x + y\n}\n")),(0,r.kt)("p",null,"That can be useful if you need to for example want to ",(0,r.kt)("em",{parentName:"p"},"accumulate errors"),", you can now benefit from the default behavior in Kotlin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun dialog(int: Int): DialogResult<Int> =\n  if(int % 2 == 0) DialogResult.Positive(it) else Dialog.Neutral\n\nval res: Either<NonEmptyList<DialogResult.Error>, NonEmptyList<Int>> =\n  listOf(1, 2, 3).mapOrAccumulate { i: Int ->\n    dialog(it).getOrElse { raise(it) }\n  }\n\ndialogResult {\n  res.mapLeft { ... }.bind()\n}\n")),(0,r.kt)("admonition",{title:"Further discussion",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This section was created as a response to\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/arrow-kt/arrow-website/issues/161"},"this issue in our repository"),".\nLet's create great docs for Arrow together!")))}d.isMDXComponent=!0}}]);