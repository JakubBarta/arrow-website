"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[5418],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},59631:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:4},i="Traversals",l={unversionedId:"learn/immutable-data/traversal",id:"learn/immutable-data/traversal",title:"Traversals",description:"The framework laid out by optics extends very nicely to values like lists, which",source:"@site/content/docs/learn/immutable-data/traversal.md",sourceDirName:"learn/immutable-data",slug:"/learn/immutable-data/traversal",permalink:"/learn/immutable-data/traversal",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/immutable-data/traversal.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"learnSidebar",previous:{title:"Optionals",permalink:"/learn/immutable-data/optional"},next:{title:"Prisms & Isos",permalink:"/learn/immutable-data/prism-iso"}},s={},p=[{value:"<code>Every</code> element in a collection",id:"every-element-in-a-collection",level:2},{value:"More than <code>getAll</code>",id:"more-than-getall",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"traversals"},"Traversals"),(0,r.kt)("p",null,"The framework laid out by optics extends very nicely to values like lists, which\ncontain any potential number of elements. Traversals is the name of that kind of\noptic."),(0,r.kt)("admonition",{title:"In a rush?",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Traversals focus on an indefinite number of values."),(0,r.kt)("li",{parentName:"ul"},"To access all the values, use ",(0,r.kt)("inlineCode",{parentName:"li"},"getAll"),"."),(0,r.kt)("li",{parentName:"ul"},"Traversals provide an API similar to those of collections."),(0,r.kt)("li",{parentName:"ul"},"To modify every value focused by the traversal, use ",(0,r.kt)("inlineCode",{parentName:"li"},"modify"),"."))),(0,r.kt)("h2",{id:"every-element-in-a-collection"},(0,r.kt)("inlineCode",{parentName:"h2"},"Every")," element in a collection"),(0,r.kt)("p",null,"As with other kinds of optics, ",(0,r.kt)("inlineCode",{parentName:"p"},"Traversal<T, A>")," represents a reference to elements\nof type ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," within a larger structure of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),". As hinted above, most\ntraversals arise from focusing on elements in a collection; in Arrow Optics,\nthose basic traversals live in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Every")," object."),(0,r.kt)("p",null,"Let's introduce a small data class for our examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@optics data class Person(val name: String, val age: Int, val friends: List<Person>) {\n  companion object\n}\n")),(0,r.kt)("p",null,"If we want to update the age of every ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," in a list, the usual way is to\nuse the ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," function from the standard library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun List<Person>.happyBirthdayMap(): List<Person> =\n  map { Person.age.modify(it) { age -> age + 1 } }\n")),(0,r.kt)("p",null,"The same code can be rewritten using only optics by leveraging a traversal for\nlists."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun List<Person>.happyBirthdayOptics(): List<Person> =\n  Every.list<Person>().age.modify(this) { age -> age + 1 }\n")),(0,r.kt)("p",null,"Traversals become more useful when composed with other optics. Imagine that we\nwant to update the age of all the friends of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person"),"; the usual implementation\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"copy")," becomes quite complex."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun Person.happyBirthdayFriends(): Person =\n  copy(\n    friends = friends.map { friend -> friend.copy(age = friend.age + 1) }\n  )\n")),(0,r.kt)("p",null,"The implementation using optics hides all the complexity related to mapping\nand copying, and simply focuses on the path to access the values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun Person.happyBirthdayFriendsOptics(): Person =\n  Person.friends.every(Every.list()).age.modify(this) { it + 1 }\n")),(0,r.kt)("admonition",{title:"Every(List)",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You might be wondering why we need to write ",(0,r.kt)("inlineCode",{parentName:"p"},"Every.list()")," as argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"every"),",\ngiven that we know that ",(0,r.kt)("inlineCode",{parentName:"p"},"Person.friends")," focuses on a ",(0,r.kt)("inlineCode",{parentName:"p"},"List<Person>"),".\nThe reason is ",(0,r.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/generics.html#type-erasure"},"type erasure"),":\nthe compiler cannot differentiate between ",(0,r.kt)("inlineCode",{parentName:"p"},"Lens<Person, List<Person>>"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"Lens<Person, Map<String, Person>>"),", so there's no way to tell which\nis the right traversal to apply in each case. However, if we provide the\nhint ourselves by giving ",(0,r.kt)("inlineCode",{parentName:"p"},"Every.list()")," as argument, the compiler is able\nto ",(0,r.kt)("em",{parentName:"p"},"check")," that our usage is correct.")),(0,r.kt)("h2",{id:"more-than-getall"},"More than ",(0,r.kt)("inlineCode",{parentName:"h2"},"getAll")),(0,r.kt)("p",null,"The counterpart to ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getOrNull")," when speaking about traversals is called\n",(0,r.kt)("inlineCode",{parentName:"p"},"getAll"),", and returns a list of focused elements. But you don't always have to\ngo through an intermediate list to obtain information about the elements focused\nby a ",(0,r.kt)("inlineCode",{parentName:"p"},"Traversal"),", we provide a ",(0,r.kt)("a",{parentName:"p",href:"https://apidocs.arrow-kt.io/arrow-optics/arrow.optics/-getter/index.html"},"large API"),"\nbased on Kotlin's collections in the standard library."),(0,r.kt)("p",null,"For example, you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"isEmpty")," to check whether the traversal matches any\nelement. Or, more generally, you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"size"),' to obtain the number of elements\nit matches. Note that, in any case, these operations are "optics-first", so\nyou need to provide the value they operate on as an argument.'))}d.isMDXComponent=!0}}]);