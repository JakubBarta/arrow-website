"use strict";(self.webpackChunkarrow_website=self.webpackChunkarrow_website||[]).push([[1002],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},47513:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:6},o="Reflection",l={unversionedId:"learn/immutable-data/reflection",id:"learn/immutable-data/reflection",title:"Reflection",description:"Although we strongly recommend generating optics using the DSL and @optics attribute, sometimes this is impossible. We provide the small utility package arrow-optics-reflect for those scenarios, which bridges Arrow Optics with Kotlin's reflection capabilities.",source:"@site/content/docs/learn/immutable-data/reflection.md",sourceDirName:"learn/immutable-data",slug:"/learn/immutable-data/reflection",permalink:"/learn/immutable-data/reflection",draft:!1,editUrl:"https://github.com/arrow-kt/arrow-website/edit/main/content/docs/learn/immutable-data/reflection.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"learnSidebar",previous:{title:"Prisms & Isos",permalink:"/learn/immutable-data/prism-iso"},next:{title:"Collections and functions",permalink:"/learn/collections-functions/"}},s={},p=[{value:"Nullables and collections",id:"nullables-and-collections",level:2},{value:"Prisms",id:"prisms",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reflection"},"Reflection"),(0,r.kt)("p",null,"Although we strongly recommend generating optics using the DSL and ",(0,r.kt)("inlineCode",{parentName:"p"},"@optics")," attribute, sometimes this is impossible. We provide the small utility package ",(0,r.kt)("inlineCode",{parentName:"p"},"arrow-optics-reflect")," for those scenarios, which bridges Arrow Optics with ",(0,r.kt)("a",{parentName:"p",href:"https://kotlinlang.org/docs/reflection.html"},"Kotlin's reflection")," capabilities."),(0,r.kt)("p",null,"Kotlin provides a simple way to obtain a reference to a class member by using ",(0,r.kt)("inlineCode",{parentName:"p"},"ClassName::memberName"),". For example, given the following class definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Person(val name: String, val friends: List<String>)\n")),(0,r.kt)("p",null,"we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Person::name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Person::friends")," to refer to each of the fields in the class. Those references are very similar to optics.\n",(0,r.kt)("inlineCode",{parentName:"p"},"arrow-optics-reflect")," provides extension methods that turn those references into optics. You can obtain a lens for the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field in ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," by writing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Person::name.lens\n")),(0,r.kt)("p",null,"which you can later use as any other lens:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun example() {\n  val p = Person("me", listOf("pat", "mat"))\n  val m = Person::name.lens.modify(p) { it.capitalize() }\n  m.name shouldBe "Me"\n}\n')),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"This only works on ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," classes with a public ",(0,r.kt)("inlineCode",{parentName:"p"},"copy")," method (which is the default). Remember that, as opposed to a mutable variable, optics will always create a ",(0,r.kt)("em",{parentName:"p"},"new")," copy when asking for modification.")),(0,r.kt)("h2",{id:"nullables-and-collections"},"Nullables and collections"),(0,r.kt)("p",null,"Sometimes it's preferable to expose a field using a different optic:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the field type is nullable, you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"optional")," to obtain an optional instead of a lens."),(0,r.kt)("li",{parentName:"ul"},"When the field type is a ",(0,r.kt)("inlineCode",{parentName:"li"},"List")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"Map"),", you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"every")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"values")," to obtain a traversal to the elements.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun example() {\n  val p = Person("me", listOf("pat", "mat"))\n  val m = Person::friends.every.modify(p) { it.capitalize() }\n  m.friends shouldBe listOf("Pat", "Mat")\n}\n')),(0,r.kt)("h2",{id:"prisms"},"Prisms"),(0,r.kt)("p",null,"A typical pattern in Kotlin programming is to define a sealed abstract class (or interface) with subclasses representing choices in a union."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"sealed interface Cutlery\nobject Fork: Cutlery\nobject Spoon: Cutlery\n")),(0,r.kt)("p",null,"We provide an ",(0,r.kt)("inlineCode",{parentName:"p"},"instance")," method that creates a prism focused only on a specific subclass of a parent class. Both ends are essential and must be provided when creating the optic:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"instance<Cutlery, Fork>()\n")),(0,r.kt)("p",null,"You can compose this optic freely with others. Here's an example in which we obtain the number of forks in a list of cutlery using optics:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun example() {\n  val things = listOf(Fork, Spoon, Fork)\n  val forks = Every.list<Cutlery>() compose instance<Cutlery, Fork>()\n  val noOfForks = forks.size(things)\n  noOfForks shouldBe 2\n}\n")))}u.isMDXComponent=!0}}]);